---
- name: Check if k3s is installed
  stat:
    path: /usr/local/bin/k3s
  register: k3s_bin

- name: Get the latest version number
  ansible.builtin.shell: curl -w '%{url_effective}' -L -s -S "https://update.k3s.io/v1-release/channels/stable" -o /dev/null | sed -e 's|.*/||'
  register: k3s_version
  when: not k3s_bin.stat.exists

- name: Get the latest version hash
  ansible.builtin.shell: curl -L https://github.com/k3s-io/k3s/releases/download/{{ k3s_version.stdout }}/sha256sum-amd64.txt | grep -w -E "\sk3s$" | awk '{print $1}'
  register: remote_bin_hash
  when: not k3s_bin.stat.exists

- name: Download binary
  ansible.builtin.command: curl -L https://github.com/k3s-io/k3s/releases/download/{{ k3s_version.stdout }}/k3s -o k3s
  when: not k3s_bin.stat.exists

- name: Make the k3s bin file executable
  ansible.builtin.file:
    path: k3s
    mode: '755'
  when: not k3s_bin.stat.exists

- name: Get downloaded binary hash
  ansible.builtin.shell: sha256sum k3s | awk '{print $1}'
  register: downloaded_bin_hash
  when: not k3s_bin.stat.exists

- name: Match the downloaded and installed hashes
  debug:
    msg: "Local: {{ downloaded_bin_hash.stdout }} | Remote: {{ remote_bin_hash.stdout }}"
  failed_when: downloaded_bin_hash.stdout != remote_bin_hash.stdout
  when: not k3s_bin.stat.exists

- name: Move the k3s bin file to its final location
  ansible.builtin.copy:
    remote_src: true
    src: ./k3s
    dest: /usr/local/bin/k3s
  when: not k3s_bin.stat.exists
  become: true
  become_method: sudo

- name: Remove the original file
  ansible.builtin.file:
    path: k3s
    state: absent

# Log the installed version
- name: Get installed k3s version
  ansible.builtin.shell: k3s -v | grep 'k3s version' | awk '{print $3}'
  register: k3s_installed_version
  failed_when: k3s_installed_version.rc != 0
  changed_when: False

- name: Display installed K3s version
  debug:
    msg: "Installed K3s version: {{ k3s_installed_version.stdout }}"


